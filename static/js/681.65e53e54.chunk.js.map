{"version":3,"file":"static/js/681.65e53e54.chunk.js","mappings":"mTACMA,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE2BC,EAAAA,EAAAA,IAAA,iEAErB,CACEC,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,EAASC,KAAKC,SAVzB,gCAYIC,QAAQC,IAAR,MAZJ,yFAgBeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,GAA5B,gGAE2BT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,mBAErB,CACER,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,GAVX,gCAYIG,QAAQC,IAAR,MAZJ,yFAgBeG,EAAe,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BC,GAA9B,gGAE2BX,EAAAA,EAAAA,IAAA,0DAC8BW,EAD9B,8CAErB,CACEV,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,GAVX,gCAYIG,QAAQC,IAAR,MAZJ,yFAgBeK,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BH,GAA5B,gGAE2BT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,2BAErB,CACER,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,GAVX,gCAYIG,QAAQC,IAAR,MAZJ,yFAgBeM,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BJ,GAA/B,gGAE2BT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,kCAErB,CACER,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,GAVX,gCAYIG,QAAQC,IAAR,MAZJ,gF,iHCjBA,UA3CA,WACE,OAA8BO,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCL,EAAAA,EAAAA,WAAS,GAA/C,eAAOO,EAAP,KAAoBC,EAApB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACRL,GAAW,GACXM,EAAAA,GACmBL,GAChBM,MAAK,YAAe,IAAZrB,EAAW,EAAXA,KACqB,IAAxBA,EAAKC,QAAQqB,OAIjBV,EAAWZ,EAAKC,SAHdiB,GAAe,EAIlB,IACAK,OAAM,SAAAC,GAAG,OAAIC,EAAAA,GAAAA,MAAY,mCAAhB,IACTC,QAAQZ,GAAW,GACvB,GAAE,CAACC,KAGF,2BACGF,IAAW,SAAC,IAAD,IACXI,GACC,uBAAG,2CAEH,wBACGN,EAAQgB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASxB,EAApB,EAAoBA,GAApB,OACX,2BACE,0BAAI,WAASuB,KAAa,KAC1B,0BACE,4BAAQ,oBAAwB,IAAEC,OAH7BxB,EADE,OAUjB,SAAC,KAAD,MAGL,C","sources":["api/movies-api.js","components/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nconst KEY = 'a81f67cfcb4d5e6663d9f2cbb7c2c958';\n\nasync function getTrending() {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieById(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieByName(query) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieCast(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieReviews(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport {\n  getTrending,\n  getMovieById,\n  getMovieByName,\n  getMovieCast,\n  getMovieReviews,\n};\n","import { useEffect, useState } from 'react';\nimport * as api from '../api/movies-api';\nimport { useParams } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Spinner } from './Loader/Loader';\n\nfunction Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const [infoMessage, setInfoMessage] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    api\n      .getMovieReviews(movieId)\n      .then(({ data }) => {\n        if (data.results.length === 0) {\n          setInfoMessage(true);\n          return;\n        }\n        setReviews(data.results);\n      })\n      .catch(err => toast.error('Something went wrong, try again.'))\n      .finally(setLoading(false));\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Spinner />}\n      {infoMessage ? (\n        <p>There is no review for this movie :( </p>\n      ) : (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <h3>Author: {author}</h3>{' '}\n              <p>\n                <strong>Author's words:</strong> {content}\n              </p>\n            </li>\n          ))}\n        </ul>\n      )}\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default Reviews;\n"],"names":["KEY","getTrending","axios","params","api_key","response","data","results","console","log","getMovieById","id","getMovieByName","query","getMovieCast","getMovieReviews","useState","reviews","setReviews","loading","setLoading","movieId","useParams","infoMessage","setInfoMessage","useEffect","api","then","length","catch","err","toast","finally","map","author","content"],"sourceRoot":""}