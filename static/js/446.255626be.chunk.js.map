{"version":3,"file":"static/js/446.255626be.chunk.js","mappings":"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","sources":["api/movies-api.js","components/Filter/Filter.jsx","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\nconst KEY = 'a81f67cfcb4d5e6663d9f2cbb7c2c958';\n\nasync function getTrending() {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieById(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieByName(query) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieCast(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieReviews(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport {\n  getTrending,\n  getMovieById,\n  getMovieByName,\n  getMovieCast,\n  getMovieReviews,\n};\n","import PropTypes from 'prop-types';\n\nexport function Filter({ setParams, query }) {\n  function onChangeInput(e) {\n    const inputValue = e.target.value === '' ? {} : { movie: e.target.value };\n    setParams(inputValue);\n  }\n\n  return (\n    <label>\n      Sort it\n      <input type=\"text\" value={query} onChange={onChangeInput} />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  setParams: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport * as api from '../api/movies-api';\nimport { Filter } from 'components/Filter/Filter';\n// import { MoviesList } from 'components/MoviesList.styled';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/css';\n\nimport 'swiper/css/effect-coverflow';\nimport 'swiper/css/pagination';\nimport { Autoplay, Keyboard, EffectCoverflow } from 'swiper/modules';\n\nfunction Home() {\n  const [movies, setMovies] = useState([]);\n\n  const location = useLocation();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieQuery = searchParams.get('movie') ?? '';\n\n  const filteredMovies = movies.filter(({ title }) =>\n    title.toLowerCase().includes(movieQuery.toLowerCase())\n  );\n\n  useEffect(() => {\n    async function getTrend() {\n      try {\n        const movies = await api.getTrending();\n        setMovies(movies);\n      } catch (error) {\n        toast.error('Something went wrong, try again.');\n      }\n    }\n    getTrend();\n  }, []);\n  return (\n    <>\n      <Filter setParams={setSearchParams} query={movieQuery} />\n      <Swiper\n        spaceBetween={50}\n        slidesPerView={5}\n        autoplay={{\n          delay: 3000,\n        }}\n        speed=\"500\"\n        loop=\"true\"\n        modules={[Autoplay, Keyboard, EffectCoverflow]}\n      >\n        {filteredMovies.map(movie => (\n          <SwiperSlide key={movie.id} zoom={true}>\n            <Link to={`movies/${movie.id}`} state={{ from: location }}>\n              <img\n                src={`http://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n                alt=\"\"\n              />\n              {movie.title}\n            </Link>\n          </SwiperSlide>\n        ))}\n      </Swiper>\n\n      <ToastContainer />\n    </>\n  );\n}\n\nexport default Home;\n"],"names":["KEY","getTrending","axios","params","api_key","response","data","results","console","log","getMovieById","id","getMovieByName","query","getMovieCast","getMovieReviews","Filter","setParams","type","value","onChange","e","inputValue","target","movie","useState","movies","setMovies","location","useLocation","useSearchParams","searchParams","setSearchParams","movieQuery","get","filteredMovies","filter","title","toLowerCase","includes","useEffect","api","toast","getTrend","spaceBetween","slidesPerView","autoplay","delay","speed","loop","modules","Autoplay","Keyboard","EffectCoverflow","map","zoom","to","state","from","src","poster_path","alt"],"sourceRoot":""}