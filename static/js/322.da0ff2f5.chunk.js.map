{"version":3,"file":"static/js/322.da0ff2f5.chunk.js","mappings":"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","sources":["api/movies-api.js","components/SearchForm/SearchForm.jsx","components/InfoMessage/InfoMessage.styled.jsx","components/InfoMessage/InfoMessage.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nconst KEY = 'a81f67cfcb4d5e6663d9f2cbb7c2c958';\n\nasync function getTrending() {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieById(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieByName(query) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieCast(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieReviews(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport {\n  getTrending,\n  getMovieById,\n  getMovieByName,\n  getMovieCast,\n  getMovieReviews,\n};\n","import { PropTypes } from 'prop-types';\nimport { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function SearchForm({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  function onChangeInput(e) {\n    setQuery(e.target.value);\n  }\n\n  function onFormSubmit(e) {\n    e.preventDefault();\n    if (query === '') {\n      return toast.warning(\"You can't do a search on an empty string\");\n    }\n    onSubmit(query);\n    setQuery('');\n  }\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <input type=\"text\" value={query} onChange={onChangeInput} />\n      <button type=\"submit\">Search</button>\n      <ToastContainer />\n    </form>\n  );\n}\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const InfoWrapper = styled.p`\n  font-size: large;\n  text-align: center;\n`;\n","import { InfoWrapper } from './InfoMessage.styled';\n\nexport function Message() {\n  return <InfoWrapper>Search for your favorite movies!</InfoWrapper>;\n}\n","import { Link, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport * as api from '../api/movies-api';\nimport SearchForm from '../components/SearchForm/SearchForm';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Spinner } from 'components/Loader/Loader';\nimport { Message } from 'components/InfoMessage/InfoMessage';\n\nfunction Movies() {\n  // const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const onTakeQuery = query => {\n    setSearchParams({ query: query });\n  };\n\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    setLoading(true);\n    api\n      .getMovieByName(query)\n      .then(({ data }) => {\n        if (data.results.length === 0) {\n          toast.warning(\"Unfortunately, we couldn't find anything.\");\n        }\n        setMovies(data.results);\n      })\n      .finally(setLoading(false));\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm onSubmit={onTakeQuery} />\n      {loading && <Spinner />}\n      {movies ? (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`}>{movie.title}</Link>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <Message />\n      )}\n      <ToastContainer />\n    </>\n  );\n}\n\nexport default Movies;\n"],"names":["KEY","getTrending","axios","params","api_key","response","data","results","console","log","getMovieById","id","getMovieByName","query","getMovieCast","getMovieReviews","SearchForm","onSubmit","useState","setQuery","e","preventDefault","toast","type","value","onChange","target","InfoWrapper","styled","Message","movies","setMovies","loading","setLoading","useSearchParams","searchParams","setSearchParams","get","useEffect","api","then","length","finally","map","movie","to","title"],"sourceRoot":""}