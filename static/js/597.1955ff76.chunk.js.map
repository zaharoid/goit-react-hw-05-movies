{"version":3,"file":"static/js/597.1955ff76.chunk.js","mappings":"mTACMA,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE2BC,EAAAA,EAAAA,IAAA,iEAErB,CACEC,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,EAASC,KAAKC,SAVzB,gCAYIC,QAAQC,IAAR,MAZJ,yFAgBeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,GAA5B,gGAE2BT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,mBAErB,CACER,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,GAVX,gCAYIG,QAAQC,IAAR,MAZJ,yFAgBeG,EAAe,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BC,GAA9B,gGAE2BX,EAAAA,EAAAA,IAAA,0DAC8BW,EAD9B,8CAErB,CACEV,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,GAVX,gCAYIG,QAAQC,IAAR,MAZJ,yFAgBeK,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BH,GAA5B,gGAE2BT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,2BAErB,CACER,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,GAVX,gCAYIG,QAAQC,IAAR,MAZJ,yFAgBeM,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BJ,GAA/B,gGAE2BT,EAAAA,EAAAA,IAAA,6CACiBS,EADjB,kCAErB,CACER,OAAQ,CACNC,QAASJ,KANnB,cAEUK,EAFV,yBAUWA,GAVX,gCAYIG,QAAQC,IAAR,MAZJ,gF,uGCzBA,UApCA,WACE,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,GACXE,EAAAA,GACgBR,GACbS,MAAK,gBAAGnB,EAAH,EAAGA,KAAH,OAAcc,EAAQd,EAAKa,KAA3B,IACLO,OAAM,SAAAC,GAAG,OAAInB,QAAQC,IAAIkB,EAAhB,IACTC,QAAQN,GAAW,GACvB,GAAE,CAACN,KAGF,gCACGK,IAAW,SAAC,IAAD,IACXF,IACC,wBACGA,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAAcrB,EAAlC,EAAkCA,GAAlC,OACR,2BACE,gBACEsB,IAAG,0CAAqCD,GACxCE,IAAI,WAEN,yBAAG,SAAOH,MACV,yBAAG,cAAYD,OANRnB,EADD,QAcnB,C","sources":["api/movies-api.js","components/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst KEY = 'a81f67cfcb4d5e6663d9f2cbb7c2c958';\n\nasync function getTrending() {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieById(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieByName(query) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieCast(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function getMovieReviews(id) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`,\n      {\n        params: {\n          api_key: KEY,\n        },\n      }\n    );\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport {\n  getTrending,\n  getMovieById,\n  getMovieByName,\n  getMovieCast,\n  getMovieReviews,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.css';\nimport * as api from '../api/movies-api';\nimport { Spinner } from './Loader/Loader';\n\nfunction Cast() {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    api\n      .getMovieCast(movieId)\n      .then(({ data }) => setCast(data.cast))\n      .catch(err => console.log(err))\n      .finally(setLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Spinner />}\n      {cast && (\n        <ul>\n          {cast.map(({ character, name, profile_path, id }) => (\n            <li key={id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w300/${profile_path}`}\n                alt=\"Actor\"\n              />\n              <p>Name: {name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default Cast;\n"],"names":["KEY","getTrending","axios","params","api_key","response","data","results","console","log","getMovieById","id","getMovieByName","query","getMovieCast","getMovieReviews","movieId","useParams","useState","cast","setCast","loading","setLoading","useEffect","api","then","catch","err","finally","map","character","name","profile_path","src","alt"],"sourceRoot":""}